#pragma once
#include"HashNode.h"

class HashTable
{
private:
	int length;
	int extra;
	int counter;
	HashNode* arr;
public:
	HashTable(int l, int e)
	{
		counter = 0;
		length = l;
		extra = e;
		arr = new HashNode[length + extra];
	}
	~HashTable()
	{
		if (arr)
			delete[] arr;
	}
	void insert(char* k)
	{
		if (counter == (length + extra))
			throw "Full";
		long plc = h(f(k));
		if (!arr[plc].isFree())
		{
			if (arr[plc].next == -1)
			{
				long pom = plc;
				plc = length;
				while (!arr[plc].isFree() && plc != length + extra)
					plc++;
				if (plc == length + extra)
					throw "Extra full!";
				arr[pom].next = plc;
			}
			else
			{
				long pom = arr[plc].next;
				plc = length;
				while (arr[pom].next != -1)
					pom = arr[pom].next;
				while (!arr[plc].isFree() && plc != length + extra)
					plc++;
				if (plc == length + extra)
					throw "Extra full!";
				arr[pom].next = plc;
			}
		}
		arr[plc].setEl(k,-1);
		counter++;
	}
	unsigned int find(char* k)
	{
		long tmp = h(f(k));
		while (tmp != -1)
		{
			if (!arr[tmp].isEqual(k))
				tmp = arr[tmp].next;
			else
				return tmp;
		}
		return -1;
	}
	void print()
	{
		for(int i=0;i<length+extra;i++)
			if (!arr[i].isFree())
			{
				cout << i << ":";
				arr[i].print();
			}
	}

private:
	unsigned int h(unsigned int i)
	{
		return i % length;
	}
	unsigned int g(unsigned int i)
	{
		return (i + 1) % length;
	}
	unsigned int f(int i)
	{
		return abs(i);
	}
	unsigned int f(double d)
	{
		if (d == 0)
			return 0;
		else
		{
			int exponent;
			double mantissa = frexp(d, &exponent);
			return (unsigned int)(2 * fabs(mantissa) - 1)*~0U;
		}
	}
	unsigned int f(char* k)
	{
		unsigned int res = 0;
		unsigned int a = 7;
		for (int i = 0; k[i] != '\0'; i++)
			res = res << a^k[i];
		return res;
	}
};